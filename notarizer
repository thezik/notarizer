#!/bin/bash
#
# Notarizer
# 
# Copyright 2023 Angelo Scicolone
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

Usage()
{
  echo "Usage: notarizer [-d <developer identity name>] -k <keychain profile name> <app path>"
}

Help()
{
  # Display Help
  echo
  echo "NOTARIZER"
  echo "Sign, zip, notarize and staple a macOS app in one fell swoop."
  echo
  Usage
  echo "options:"
  echo "h     Print this Help."
  echo "d     Codesign app using provided Developer Identity name, excluding team ID (optional, skips codesign if not specified)"
  echo "k     Name of Keychain-stored Profile with app store connect credentials (mandatory)"
  echo
  echo "Requires a valid Developer ID certificate to be installed in the keychain to codesign the app, and App Store Connect credentials stored in a keychain profile to notarize the app."
  echo
  echo "To discover names and teams IDs of currently installed Developer Identities, just use:"
  echo "security find-identity -p basic -v"
  echo
  echo "To store credentials just use:"
  echo "xcrun notarytool store-credentials --apple-id <app store connect username> --team-id <team id>"
  echo
  echo "Note that this will ask for (app-specific) app store connect password and for a name to save a profile, that you can later use"
  echo
}


# Get the options
while getopts ":hn:d:k:" option; do
  case ${option} in
    h) # display Help
        Help; exit 1;;
    d) # developer identity
        DEVELOPER_IDENTITY=${OPTARG};;
    k) # keychain profile
        KEYCHAIN_PROFILE=${OPTARG};;
    \?) # Invalid option
        echo "Error: Invalid option";
        exit 1;;
    : ) echo "Option -$OPTARG requires an argument." >&2; exit 1;;
  esac
done
shift $((OPTIND -1))

if [[ $# -eq 0 ]]; then
  echo "Missing argument: <path>" >&2;
  Usage;
  exit 1;
fi

# Check if mandatory arguments are present

if [[ -z $KEYCHAIN_PROFILE ]]; then
  echo "Missing argument: -k <keychain profile>" >&2; exit 1
fi

# Split path into directory path and file name
path=$1
BASEDIR=$(dirname "$path")
APP_NAME=$(basename "$path")
cd "$BASEDIR"

# Define constants to display status messages in colors
TEXTRED="\033[1;31m"
TEXTGREEN="\033[1;32m"
TEXTYELLOW="\033[1;33m"
TEXTNORMAL="\033[0m"

# codesign app
if [[ "$DEVELOPER_IDENTITY" ]]; then
  echo -e $TEXTGREEN"Codesigning $APP_NAME... "$TEXTNORMAL
  codesign --force --options runtime --deep --sign "$DEVELOPER_IDENTITY" "$APP_NAME"
  if [ $? -eq 0 ]
  then
    echo -e $TEXTGREEN"Codesign successful"$TEXTNORMAL
  else
    echo -e $TEXTRED"FAILED"$TEXTNORMAL
    exit 1
  fi
fi

# zip app
echo -en $TEXTGREEN"Zipping $APP_NAME... "$TEXTNORMAL
/usr/bin/ditto -c -k --keepParent "$APP_NAME" "$APP_NAME.zip"
if [ $? -eq 0 ]
then
  echo -e $TEXTGREEN"done"$TEXTNORMAL
else
  echo -e $TEXTRED"FAILED"$TEXTNORMAL
  exit 1
fi

# notarize app
echo -e $TEXTGREEN"Sending package to Apple for notarization... "$TEXTNORMAL
xcrun notarytool submit "$APP_NAME.zip" --keychain-profile "$KEYCHAIN_PROFILE" --wait

# remove zip
rm "$APP_NAME.zip"

# staple
echo -e $TEXTGREEN"Stapling $APP_NAME... "$TEXTNORMAL
xcrun stapler staple "$APP_NAME"
if [ $? -eq 0 ]
then
  echo -e $TEXTGREEN"Success"$TEXTNORMAL
else
  echo -e $TEXTRED"FAILED, to see log use: xcrun notarytool log <Submission ID> --keychain-profile \"$KEYCHAIN_PROFILE\""$TEXTNORMAL
  exit 1
fi